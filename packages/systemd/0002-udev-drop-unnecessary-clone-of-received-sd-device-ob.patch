From 99c3273b0d6b7cb94914db4a4df877f5328577be Mon Sep 17 00:00:00 2001
From: Yu Watanabe <watanabe.yu+github@gmail.com>
Date: Fri, 25 Mar 2022 01:13:39 +0900
Subject: [PATCH 02/12] udev: drop unnecessary clone of received sd-device
 object

As the sd-device object received through sd-device-monitor is sealed,
so the corresponding udev database or uevent file will not be read.
---
 src/udev/udevd.c | 22 +++++-----------------
 1 file changed, 5 insertions(+), 17 deletions(-)

diff --git a/src/udev/udevd.c b/src/udev/udevd.c
index 9320284be6..fbe0be8556 100644
--- a/src/udev/udevd.c
+++ b/src/udev/udevd.c
@@ -122,7 +122,6 @@ typedef struct Event {
         EventState state;
 
         sd_device *dev;
-        sd_device *dev_kernel; /* clone of originally received device */
 
         uint64_t seqnum;
         uint64_t blocker_seqnum;
@@ -161,7 +160,6 @@ static Event *event_free(Event *event) {
 
         LIST_REMOVE(event, event->manager->events, event);
         sd_device_unref(event->dev);
-        sd_device_unref(event->dev_kernel);
 
         sd_event_source_unref(event->timeout_warning_event);
         sd_event_source_unref(event->timeout_event);
@@ -976,9 +974,8 @@ static int event_queue_start(Manager *manager) {
 }
 
 static int event_queue_insert(Manager *manager, sd_device *dev) {
-        _cleanup_(sd_device_unrefp) sd_device *clone = NULL;
-        Event *event;
         uint64_t seqnum;
+        Event *event;
         int r;
 
         assert(manager);
@@ -992,15 +989,6 @@ static int event_queue_insert(Manager *manager, sd_device *dev) {
         if (r < 0)
                 return r;
 
-        /* Save original device to restore the state on failures. */
-        r = device_shallow_clone(dev, &clone);
-        if (r < 0)
-                return r;
-
-        r = device_copy_properties(clone, dev);
-        if (r < 0)
-                return r;
-
         event = new(Event, 1);
         if (!event)
                 return -ENOMEM;
@@ -1008,7 +996,6 @@ static int event_queue_insert(Manager *manager, sd_device *dev) {
         *event = (Event) {
                 .manager = manager,
                 .dev = sd_device_ref(dev),
-                .dev_kernel = TAKE_PTR(clone),
                 .seqnum = seqnum,
                 .state = EVENT_QUEUED,
         };
@@ -1444,10 +1431,11 @@ static int on_sigchld(sd_event_source *s, const struct signalfd_siginfo *si, voi
                         device_tag_index(worker->event->dev, NULL, false);
 
                         if (manager->monitor) {
-                                /* forward kernel event without amending it */
-                                r = device_monitor_send_device(manager->monitor, NULL, worker->event->dev_kernel);
+                                /* Forward kernel event to libudev listeners */
+                                r = device_monitor_send_device(manager->monitor, NULL, worker->event->dev);
                                 if (r < 0)
-                                        log_device_error_errno(worker->event->dev_kernel, r, "Failed to send back device to kernel: %m");
+                                        log_device_warning_errno(worker->event->dev, r,
+                                                                 "Failed to broadcast failed event to libudev listeners, ignoring: %m");
                         }
                 }
 
-- 
2.25.1

